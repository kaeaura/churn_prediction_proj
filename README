Meetings:
	- 2011/11/23
		- Topics:
			- Finder the leaders and predict the leaders in MMOG
			- Predict if the player will be online in the near future
			- Prove the exisitence of the players in Bartle test: Achivers, Explorers, Socializers, and Killers 
	- 2011/09/30 
		- 問題逐一回答, 以題目命名圖檔
		- CDF
		- 夜貓指數 (11 pm ~ 05 am)
		- p-value
	- 2011/10/07
		- CCDF, log-log
		- gender with time effect *
		- realm size normalization (with observation period lenght) *
		- Chi-Square test *
	- 2011/10/26
		- table auto-matically generated
		- level-up rate: max-achieved lv / subscription length
		- part 1: gender issue
			- 不同性別角色／玩家之間的互動關係／強度也值得分析，例如說女生角色會不會找 男生角色比較多，是誰主動？
			- 同一個帳號若有多重角色性別的話，這種玩家會不會跟別人有不同？
			- 同一個帳號若有多重角色性別的話，他／她的男／女角色會跟什麼性別的角色互 動？是主動或被動？
		- part 2: realm issue: realm的特質是否影響玩家的行為?
			- factors: realm period, realm size, realm freshness

Topics: Basic Observation in Players and Characters in MMOG
	- report file: doc/dataset_summary.Rnw
	- trace:
		# nyx server
		realm		users		actsize		range				months	parts	gen
		alice		73275		219M		2003-11 ~ 2004-04	6		3		18 * 4
		mermaid		112087		2.3G		2003-09 ~ 2004-05	8		3 (+1)	24 * 4
		doll		135910		4.2G		2003-04 ~ 2004-05	14		5		70 * 4
		anderson	252917		9.7G		2003-03 ~ 2004-05	15		9		135 * 4
		# baal server
		wolf		189885		4.9G		2003-03 ~ 2004-05	12		7		90 * 4
		red			167876		5.3G		2003-03 ~ 2004-05	15		6		105
		green		211757		9.1G		2003-03 ~ 2004-05	-		-
	- data:
			content in pickle: 
				dictionary:
					key: character-id
					value: Char class [mold_saver.py] (Attribute + Activity + Events)

			group size: 30000 users
			time-slot size: 1 month
			file table:
						time slot
						T1		T2		...
				group
				G1		G1T1	...
				G2		...

			action needed: 
				- bind: (G1T1 + G2T1) load two pickle files and zip the two dicts 
				- update: (G1T1 + G1T2) load two pickle files and merge them

source:
	commander:
		Makefile

	trace_distiller: dig the information from trace and write them in log
		ch_parser.awk
		extraction.sh
		get_trace.R
		get_trace_path.R
		map_realm.py
		header.sh:
			find the *.o file in trace and return the head line
		profile_parser.py:
			parser for the *.o trace-files
		profile_parser_batch.sh
			parser for the *.o trace-files in a batch

	log_analyzer: fetch or rebuild the information from the log
		family_info.sh
		getn_table.py
		map_profile.awk
		map_profile.sh
		map_realm.py
		mold_saver.py
		mold_loader.py

	function: utility
		colset.sh
		emotion_text_detection
		train.r

	resource:
		realm.map.csv
